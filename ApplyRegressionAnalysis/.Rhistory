A = matrix(c(2,1,1,4),nr = 2)
nrow(A)
row_vector <- A[1, ]
column_vector <- A[, 1]
plot(row_vector)
row_vector
row_vector2 <- A[2, ]
plot(row_vector1, row_vector2)
row_vector1 <- A[1, ]
plot(row_vector1, row_vector2)
row_vector1
row_vector2
column_vector1 <- A[, 1]
column_vector2 <- A[,2]
column_vector1
column_vector2
plot(column_vector1,column_vector2)
rankMatrix(A)
eigen(A)
t(A)
eigen(A)$vectors
eigen(A)$vectors%*%eigen(A)$values%*%t(eigen(A)$vectors)
t(eigen(A)$vectors)
eigen(A)$values
eigen(A)$values
eigen(A)$values[1]
lambda = matrix(c(eigen(A)$values[1],0,0,eigen(A)$values[2]),nrow=2)
eigen(A)$vectors%*%lambda%*%t(eigen(A)$vectors)
eigen(ginv(A))
t(A)%*%A
eigen(t(A)%*%A)
ginv(t(A)%*%A)
A2 <- (t(A)%*%A)%*%(t(A)%*%A)
A2
eigen(A2)
lambda = matrix(c(eigen(A2)$values[1],0,0,eigen(A2)$values[2]),nrow=2)
eigen(A2)$vectors%*%lambda%*%t(eigen(A2)$vectors)
#2.4
D = matrix(c(1,0,0,0,9,0,0,0,16),nr=3)
rankMatrix(D)
eigen(D)
t(D)
lambda = lambda = matrix(c(eigen(D)$values[1],0,0,eigen(D)$values[2]),nrow=2)
eigen(A)$vectors%*%lambda%*%t(eigen(A)$vectors)
lambda = lambda = matrix(c(eigen(D)$values[1],0,0,0,eigen(D)$values[2],0,0,0,eigen(D)$values[3]),nrow=3)
eigen(A)$vectors%*%lambda%*%t(eigen(A)$vectors)
eigen(D)$vectors%*%lambda%*%t(eigen(D)$vectors)
eigen(rankMatrix(D))
tr(D)
trace(D)
cov2cor(D)
det(D)
eigen(D)$values
det(D) == eigen(D)$values[1]*eigen(D)$values[2]*eigen(D)$values[3]
det(D) == prod(eigens$values)
det(D) == prod(eigens$values)
det(D) == prod(eigen(D)$values)
sum(diag(D)) == sum(eigen(D)$values)
#2.4
D = matrix(c(1,0,0,0,9,0,0,0,16),nr=3)
rankMatrix(D)
eigen(D)
t(D)
lambda =  matrix(c(eigen(D)$values[1],0,0,0,eigen(D)$values[2],0,0,0,eigen(D)$values[3]),nrow=3)
eigen(D)$vectors%*%lambda%*%t(eigen(D)$vectors)
eigen(rankMatrix(D))
cov2cor(D)
det(D) == prod(eigen(D)$values)
sum(diag(D)) == sum(eigen(D)$values)
ginv(D)
#2.5
A = matrix(c(5,-4,3,-4,8,6,3,6,9),nr=3)
eigen(A)
sum(diag(A)) == sum(egien(A)$values)
sum(diag(A)) == sum(eigen(A)$values)
det(A) == prod(eigen(A)$values)
ginv(A)
#3.4
x<-runif(100,0,10)
?runif
y<-2+3*x+rnorm(1000,0,1)
plot(x,y)
d<-lm(x.y)
d<-lm(x,y)
d<-lm(y~x)
plot(x,y)
y<-2+3*x+rnorm(100,0,1)
plot(x,y)
d<-lm(y~x)
cor(x,y)
d
plot(d)
abline(lm(y~x))
abline(d))
abline(d)
plot(x,y)
d<-lm(y~x)
cor(x,y)
abline(d)
lm(y~x)
summary(d)
confint(d, level = 0.95)
confint(d$coefficients, level = 0.95)
d$coefficients
d$coefficients$x
d$coefficients
d$fitted.values
confint(d$coefficients, level = 0.95)
confint(d, level = 0.95)
summary(d)
library(lmtest)
dwtest(d)
qqnorm(d)
qqnorm(d$residuals)
dwtest(d$residuals)
dwtest(d)
residuals(d)
plot(x,d)
plot(x,residuals(d))
dwtest(d)
qqnorm(d$residuals)
library(readxl)
table3_5_campaign <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table3.5_campaign.xlsx")
View(table3_5_campaign)
View(table3_5_campaign)
#3.5
table3_5_campaign
x<-table3_5_campaign$X
y<-table3_5_campaign$y
y<-table3_5_campaign$Y
plot(x,y)
cor(x,y)
l = lm(y~x)
l
abline(l)
summary(;)
summary(l)
confint(l, level=0.95)
residuals(l)
sum(residuals(l)^2)
plot(x,residuals(l))
dwtest(l)
qqplot(l)
qqnomr(residuas(l))
qqnomr(residuals(l))
qqnorm(residuals(l))
l
predict(l,newdata = data.frame(50))
predict(l,newdata = data.frame(x=50))
#3.6
library(faraway)
install.packages('faraway')
#3.6
library(faraway)
data("stat500")
stat500
stat500<-data.frame(scale(stat500))
plot(final~midterm, stat500)
abline(0,1)
?abline
?scale
plot(final~midterm, stat500)
plot(final~~midterm, stat500)
plot(final~midterm, stat500)
abline(0,1)
cor(final,midterm)
cor(final,midterm,data=stat500)
?cor
cor(stat500$final,stat500$midterm)
?lm
plot(final~midterm, stat500)
lm(final~midterm,data = stat500)
l<-lm(y~x -1)
summary(l)
l<-lm(stat500$final~stat500$midterm -1)
summary(l)
l1l=m(final~midterm,data = stat500)
l1=lm(final~midterm,data = stat500)
l2<-lm(stat500$final~stat500$midterm -1)
summary(l1)
attach(stat500)
matplot(midterm, final)
?matplot
matplot(midterm, final,type='p')
matplot(midterm, final,type='p',)
matplot(midterm, final,type='p',)
type=''
?matplot
plot(final~midterm)
matplot(midterm, final,type='p',)
plot(final~midterm)
matplot(midterm, final,type='p',)
plot(final~midterm)
range(midterm)
matplot(range(midterm), predict(l1),type='p',)
matplot(midterm, predict(l1),type='p',)
plot(final~midterm)
matplot(midterm, predict(l1),type='p',)
matplot(final~midterm)
matplot(final,midterm)
plot(final~midterm)
matplot(l1,type='p',)
?range
range(midterm,midterm)
x1<-c(1,2,3,4,5)
x2=c(4,7,9,2,3)
range(x1,x2)
matplot(range(midterm),cbind(predict(l1),predict(l2),type='l')
matplot(range(midterm),cbind(predict(l1),predict(l2),type='l',col = c("blue", "red"), xlab = "x", ylab = "y", main = "두 개의 회귀직선")
matplot(range(midterm),cbind(predict(l1),predict(l2)),type='l',col = c("blue", "red"), xlab = "x", ylab = "y", main = "두 개의 회귀직선")
matplot(range(midterm),cbind(predict(l1),predict(l2)),type='l')
matplot(midterm,cbind(predict(l1),predict(l2)),type='l')
matplot(midterm,predict(l1),type='l')
matplot(midterm,predict(l2))
matplot(midterm,predict(l2),type='l')
matplot(midterm,predict(l2),type='n')
matplot(midterm,predict(l1),type='n')
matplot(midterm,predict(l2),type='n')
matplot(midterm,predict(l1),predict(l2),type='n')
matplot(midterm,predict(l1),predict(l2),type='l')
matplot(midterm,predict(l1),predict(l2),type='l')
matplot(midterm,predict(l1),,type='l')
matplot(midterm,predict(l1),type='l')
plot(final~midterm)
matplot(midterm,predict(l1),type='l')
lines(midterm,predict(l1))
lines(midterm,predict(l2))
lines(midterm,predict(l1))
lines(midterm,predict(l2),color='red')
lines(midterm,predict(l2),col='red')
lines(midterm,predict(l2))
lines(midterm,predict(l2))
lines(midterm,predict(l2))
lines(midterm,predict(l1))
lines(midterm,predict(l1))
lines(midterm,predict(l2))
matplot(midterm,data.frame(predict(l1),predict(l2)))
matplot(midterm,data.frame(predict(l1),predict(l2)),type=l)
matplot(midterm,data.frame(predict(l1),predict(l2)),type='l')
matplot(midterm,data.frame(predict(l1),predict(l2)),type='l',pch = c(1,2),col = c('red','blue'))
plot(final~midterm, stat500)
matplot(midterm,data.frame(predict(l1),predict(l2)),type='l',pch = c(1,2),col = c('red','blue'))
plot(final~midterm, stat500)
lines(midterm,data.frame(predict(l1),predict(l2)),type='l',pch = c(1,2),col = c('red','blue'))
lines(midterm,predict(l1))
lines(midterm,predict(l2))
lines(midterm,predict(l1),col='red')
lines(midterm,predict(l2),col='blue')
data("stat500")
attach(stat500)
plot(final~midterm, stat500)
lines(midterm,predict(l1),col='red')
lines(midterm,predict(l2),col='blue')
l1=lm(final~midterm,data = stat500)
l2<-lm(stat500$final~stat500$midterm -1)
lines(midterm,predict(l1),col='red')
lines(midterm,predict(l2),col='blue')
l2
summary(;1)
summary(l1)
summary(l2)
#3.7
data(women)
plot(weight~height)
plot(height,weight)
attach(women)
plot(height,weight)
plot(weight,height)
l = lm(height~weight)
abline(l)
summary(l)
plot(l)
plot(l)
plot(l)
catfish <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table3.6_catfish.xlsx")
View(catfish)
#3.8
catfish
attach(catfish)
plot(Y~X)
cor(X,Y)
l = lm(Y~X)
l
abline(l)
summary(l)
confint(l,level=0.95)
library(readxl)
chole <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.4_cholesterol.xlsx")
View(chole)
#4.1
attach(chole)
plot(x1,y)
View(chole)
library(readxl)
chole <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.4_cholesterol.xlsx")
View(chole)
#4.1
attach(chole)
plot(x1,y)
View(chole)
plot(x2,y)
l.1 = lm(y~x1)
l.2 = lm(y~x2)
l.3 = lm(y~x1+x2)
summary(l.3)
plot(y,residuals(l.3))
qqplot(l.3)
qqplot(residuals(l.3)
qqplot(residuals(l.3)
qqplot(residuals(l.3))
qqplot(y,residuals(l.3))
shapiro.test(residuals(l.3))
library(lmtest)
dwtest(l.3)
?fitted
fitted(l.3,84,54)
predict(l.3,newdata=data.frame(x1=400, x2=54))
library(readxl)
city <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.5_city.xlsx")
View(city)
#4.2
attach(city)
plot(x1,y)
plot(x2,y)
plot(x3,y)
plot(x1,y)
plot(x2,y)
plot(x3,y)
l.city = lm(y~x1+x2+x3)
summary(l.city)
plot(y,resid(l.city))
qqplot(y,resid(l.city))
shapiro.test(resid(l.3))
dwtest(l.3)
predict(l.city,newdata=data.frame(x1=700, x2=27, x3=7.1))
library(readxl)
fighter <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.6_fighter.xlsx")
View(fighter)
#4.3
attach(fighter)
?log
fighter$LFFD = log(fighter$FFD)
plot(FFD,CAR)
plot(FFD,SPR)
plot(LFFD,SPR)
#4.3
attach(fighter)
plot(LFFD,SPR)
plot(RGF,SPR)
plot(PLF,SPR)
plot(SLF,SPR)
l.fighter=lm(SPR~LFFD+RGF+PLF+SLF)
summary(l.fighter)
plot(SPR,resid(l.fighter))
qqplot(SPR,resid(l.fighter))
library(readxl)
drill <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.7_drill.xlsx")
View(drill)
#4.4
attach(drill)
plot(S,Y)
plot(F,Y)
plot(D,Y)
l.drill=lm(Y~S+F+D)
summary(l.drill)
l.drill2=lm(Y~S+F+D+S*F+S*D+F*D+S*S+F*F+D*D)
summary(l.drill2)
library(readxl)
psychology <- read_excel("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/회귀분석_데이터/table4.8_psychology.xlsx")
View(psychology)
#4.5
attach(psychology)
plot(x1,y)
plot(x2,y)
l.psy=lm(y~x1+x2)
summary(l.psy)
l.psy2 = lm(y~x1)
l.psy3 = lm(y~x2)
plot(l.psy2)
summary(l.psy2)
summary(l.psy3)
#4.6
data(stackloss)
stackloss
plot(air.flow~stack.loss)
plot(Air.Flow~stack.loss)
attach(stackloss)
plot(Air.Flow~stack.loss)
plot(stack.loss~Air.Flow)
plot(stack.loss~Water.Temp)
plot(stack.loss~Acid.Conc.)
l = lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.)
summary(l)
plot(l)
data(pressure)
pressure
attach(pressure)
pressure
plot(temperature,pressure)
plot(pressure$temperature,pressure$pressure)
l.pressure = lm(pressure$pressure~pressure$temperature)
plot(l.pressur)
plot(l.pressure)
abline(l.pressure)
plot(pressure$temperature,pressure$pressure)
abline(l.pressure)
?log
log10(pressure$pressure)
new_press = log10(pressure$pressure)
l.pressure_new = lm(new_press ~ pressure$temperature)
l.pressure_new
plot(pressure$temperature,pressure$pressure)
abline(l.pressure_new)
plot(pressure$temperature,new_press)
abline(l.pressure_new)
#2
library(faraway)
data(aatemp)
attach(aatemp)
plot(year,temp)
l.temp = lm(temp~year)
abline(l.temp)
resid(l.temp)
plot(resid(l.temp))
l.temp_2 = lm(log10(temp)~year)
plot(year,log10(temp))
abline(l.te)
abline(l.temp_2)
abline(l.temp_2)
cor.test(year,temp)
l.temp_3 = lm(temp~I(year + year^2))
l.temp_3
l.temp_3 = lm(temp~year + I(year^2))
l.temp_3
plot(year,temp)
abline(l.temp_#)
abline(l.temp_3)
abline(l.temp_3)
plot(year,temp)
abline(l.temp_3)
l.temp_3
summary(l.temp_3)
summary(l.temp)
#3
attach(swiss)
swiss
l.swiss = lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
dwtest(l.swiss)
library(lmtest)
dwtest(l.swiss)
shapiro.test(resid(l.swiss))
plot(Fertility,resid(l.swiss))
shapiro.test(resid(l.swiss))
ls.diag(l.swiss)
ncvTest(l.swiss)
library(MASS)
ncvTest(l.swiss)
ncvtest(l.swiss)
ncvtest(l.swiss)
library(survival)
ncvtest(l.swiss)
source("C:/대학교/3학년/2학기/응용회귀분석/R회귀분석자료/R회귀분석_프로그램/프로그램5.2.R", echo=TRUE)
library(car)
fit <- lm(mpg~disp+hp+wt+drat, data=mtcars)   # OLS fit
summary(fit)
# Assessing Outliers
outlier.test(fit)            # Bonferonni p-value for most extreme obs
qq.plot(fit, main="QQ Plot")   # qq plot for studentized resid
h <- hat(model.matrix(fit))
plot(h, type = "h", xlab="case index", main="leverage plot")
# leverage plots  ?׸? 5.4
# Influential Observations
avPlots(fit,  ask=FALSE)       # added variable plots ?׸? 5.5
# Cook's D plot  : identify D values > 4/(n-k-1)  # ?׸? 5.6
cutoff <- 4/((nrow(mtcars)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
# Influence Plot  # ?׸? 5.7
influencePlot(fit, main="Influence Plot",
sub="Circle size is proportial to Cook's Distance" )
# Normality of Residuals       # ?׸? 5.8
qqPlot(fit, main="QQ Plot")    # t ???? Q-Q plot for studentized resid
# distribution of studentized residuals
library(MASS)
sresid <- studres(fit)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
# Evaluate homoscedasticity
ncvTest(fit)     # non-constant error variance test
library(MASS)
ncvtest(l.swiss)
ncvTest(l.swiss)
h <- hat(model.matrix(l.swiss))
plot(h, type = "h", xlab="case index", main="leverage plot")
influencePlot(l.swiss, main="Influence Plot",
sub="Circle size is proportial to Cook's Distance" )
influence(l.swiss)
dffits(fit)   # DFFITS
# influece measure
inflm.fit <- influence.measures(fit)
which(apply(inflm.fit$is.inf, 1, any))
# which observations 'are' influential: ????��?? ????
summary(inflm.fit)   # only these
inflm.swiss <- influence.measures(l.swiss)
summary(inflm.fit)
summary(inflm.swiss)
inflm.fit
summary(inflm.swiss)
outlier.test(l.swiss)
outlierTest(l.swiss)
summary(l.swiss)
